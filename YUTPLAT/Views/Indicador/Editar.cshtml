@using YUTPLAT.ViewModel
@model IndicadorViewModel

<style type="text/css">
    .validation-summary-errors ul {
        list-style: none;
        margin-left: -40px;
    }
</style>

<script type="text/javascript">
    $(document).ready(function () {

        $(".errorGeneral").hide();

        $("input[type=text]").keydown(function () {
            $(".errorGeneral").hide();
        });

        $('#form').submit(function () {
            $(".errorGeneralSummary").hide();
            if (!$('#form').valid()) {
                $(".errorGeneral").show();
                return false;
            }
            else {
                return true;
            }
        });

        $('#dpFechaValidez').datetimepicker({
            format: "MM/YYYY",
            locale: 'es',
            keepOpen: false
        });

    });
</script>

<div class="content">
    <div class="container-fluid">

        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="header">
                        <h4 class="title">Editar</h4>
                    </div>
                    <div class="content">
                        @using (Html.BeginForm("Editar", "Indicador", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { id = "form", role = "form" }))
                        {
                            @Html.HiddenFor(m => m.Id);
                            @Html.HiddenFor(m => m.Grupo);

                            @Html.ValidationSummary(true, "", new { @class = "text-danger errorGeneralSummary" })

                            <div style="display:none;" class="text-danger errorGeneral">
                                Verifique que todos los campos estén cargados y sean correctos.
                            </div>

                            <div class="row">
                                <div class="col-xs-12 col-sm-6 col-md-4">
                                    @Html.LabelFor(m => m.Nombre)
                                    <span class="text-danger">*</span>
                                    @Html.TextBoxFor(m => m.Nombre, new { @class = "form-control" })
                                    <span class="aclaracion">(máximo 150 caracteres)</span>
                                    @Html.ValidationMessageFor(m => m.Nombre, "", new { @class = "text-danger" })
                                </div>

                                <div class="col-xs-12 col-sm-6 col-md-4">
                                    @Html.LabelFor(m => m.ObjetivoID)
                                    <span class="text-danger">*</span>
                                    @Html.DropDownListFor(m => m.ObjetivoID, new SelectList(new List<SelectListItem> { new SelectListItem { Text = Model.ObjetivoViewModel.Nombre, Value = Model.ObjetivoViewModel.Id.ToString() } }, "Value", "Text"), new { @id = "ddlObjetivos", @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.ObjetivoID, "", new { @class = "text-danger" })
                                </div>

                                <div class="col-xs-12 col-sm-6 col-md-4">
                                    @Html.LabelFor(m => m.AreaID)
                                    @Html.DropDownListFor(m => m.AreaID, new SelectList(new List<SelectListItem> { new SelectListItem { Text = Model.ObjetivoViewModel.AreaViewModel.Nombre, Value = Model.ObjetivoViewModel.AreaViewModel.Id.ToString() } }, "Value", "Text"), new { @id = "ddlAreas", @class = "form-control" })

                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xs-12 col-sm-6 col-md-4">
                                    @Html.LabelFor(m => m.FrecuenciaMedicionIndicadorID)
                                    <span class="text-danger">*</span>
                                    @Html.DropDownListFor(m => m.FrecuenciaMedicionIndicadorID, new SelectList(new List<SelectListItem> { new SelectListItem { Text = Model.FrecuenciaMedicionIndicadorViewModel.Descripcion, Value = Model.FrecuenciaMedicionIndicadorViewModel.FrecuenciaMedicionIndicadorID.ToString() } }, "Value", "Text"), new { @id = "ddlFrecuencias", @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.FrecuenciaMedicionIndicadorID, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-xs-12 col-sm-6 col-md-2">
                                    @Html.LabelFor(m => m.FechaValidez)
                                    <div class="input-group date" id="dpFechaValidez">
                                        @Html.TextBoxFor(m => m.FechaValidez, new { @class = "form-control" })
                                        <div class="input-group-addon">
                                            <span class="glyphicon glyphicon-calendar"></span>
                                        </div>
                                    </div>
                                    @Html.HiddenFor(m => m.FechaValidez)
                                </div>  
                                <div class="col-xs-12 col-sm-6 col-md-2">
                                    @Html.LabelFor(m => m.FechaCreacion)
                                    <p class="description">@Model.FechaCreacion</p>
                                    @Html.HiddenFor(m => m.FechaCreacion)
                                </div>

                                @if (!String.IsNullOrEmpty(Model.FechaUltimaModificacion))
                                {
                                    <div class="col-xs-12 col-sm-6 col-md-2">
                                        @Html.LabelFor(m => m.UltimoUsuarioModifico)
                                        <p class="description">@Model.UltimoUsuarioModifico</p>
                                    </div>

                                    <div class="col-xs-12 col-sm-6 col-md-2">
                                        @Html.LabelFor(m => m.FechaUltimaModificacion)
                                        <p class="description">@Model.FechaUltimaModificacion</p>
                                        @Html.HiddenFor(m => m.FechaUltimaModificacion)
                                    </div>
                                }
                            </div>
                            <div class="row">
                                <div class="col-xs-12 col-sm-12 col-md-12">
                                    @Html.LabelFor(m => m.Descripcion)
                                    @Html.TextAreaFor(m => m.Descripcion, new { @rows = 5, @class = "form-control" })
                                    <span class="aclaracion">(máximo 2000 caracteres)</span>
                                    @Html.ValidationMessageFor(m => m.Descripcion, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xs-12 col-sm-6 col-md-6">
                                    @Html.LabelFor(m => m.MetaExcelenteViewModel)
                                    <div class="testimonial-group">
                                        <div class="row">
                                            <div class="width-row">
                                                <div class="width-meta-izq">
                                                    @Html.TextBoxFor(m => m.MetaExcelenteViewModel.Valor1, new { @class = "form-control  width-meta" })
                                                </div>
                                                <div class="width-signo">
                                                    @Html.EnumDropDownListFor(x => x.MetaExcelenteViewModel.Signo1, new { @class = "form-control  width-signo" })
                                                </div>
                                                <div class="width-nro">
                                                    meta
                                                </div>
                                                <div class="width-signo">
                                                    @Html.EnumDropDownListFor(x => x.MetaExcelenteViewModel.Signo2, new { @class = "form-control  width-signo" })
                                                </div>
                                                <div class="width-meta">
                                                    @Html.TextBoxFor(m => m.MetaExcelenteViewModel.Valor2, new { @class = "form-control  width-meta" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <span class="aclaracion">(ejemplo: 1 >= meta > 0.8)</span>
                                    @Html.ValidationMessageFor(m => m.MetaExcelenteViewModel, "", new { @class = "text-danger" })
                                    @Html.ValidationMessageFor(m => m.MetaExcelenteViewModel.Valor1, "", new { @class = "text-danger" })
                                    @Html.ValidationMessageFor(m => m.MetaExcelenteViewModel.Valor2, "", new { @class = "text-danger" })
                                </div>

                                <div class="col-xs-12 col-sm-6 col-md-6">
                                    <label>Meta satisfactoria</label>
                                    <div class="testimonial-group">
                                        <div class="row">
                                            <div class="width-row">
                                                <div class="width-meta-izq">
                                                    @Html.TextBoxFor(m => m.MetaSatisfactoriaViewModel.Valor1, new { @class = "form-control width-meta" })
                                                </div>
                                                <div class="width-signo">
                                                    @Html.EnumDropDownListFor(x => x.MetaSatisfactoriaViewModel.Signo1, new { @class = "form-control width-signo" })
                                                </div>
                                                <div class="width-nro">
                                                    meta
                                                </div>
                                                <div class="width-signo">
                                                    @Html.EnumDropDownListFor(x => x.MetaSatisfactoriaViewModel.Signo2, new { @class = "form-control width-signo" })
                                                </div>
                                                <div class="width-meta">
                                                    @Html.TextBoxFor(m => m.MetaSatisfactoriaViewModel.Valor2, new { @class = "form-control width-meta" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <span class="aclaracion">(ejemplo: 0.80 >= meta > 0.6)</span>
                                    @Html.ValidationMessageFor(m => m.MetaSatisfactoriaViewModel, "", new { @class = "text-danger" })
                                    @Html.ValidationMessageFor(m => m.MetaSatisfactoriaViewModel.Valor1, "", new { @class = "text-danger" })
                                    @Html.ValidationMessageFor(m => m.MetaSatisfactoriaViewModel.Valor2, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xs-12 col-sm-6 col-md-6">
                                    <label>Meta aceptable</label>
                                    <div class="testimonial-group">
                                        <div class="row">
                                            <div class="width-row">
                                                <div class="width-meta-izq">
                                                    @Html.TextBoxFor(m => m.MetaAceptableViewModel.Valor1, new { @class = "form-control width-meta" })
                                                </div>
                                                <div class="width-signo">
                                                    @Html.EnumDropDownListFor(x => x.MetaAceptableViewModel.Signo1, new { @class = "form-control width-signo" })
                                                </div>
                                                <div class="width-nro">
                                                    meta
                                                </div>
                                                <div class="width-signo">
                                                    @Html.EnumDropDownListFor(x => x.MetaAceptableViewModel.Signo2, new { @class = "form-control width-signo" })
                                                </div>
                                                <div class="width-meta">
                                                    @Html.TextBoxFor(m => m.MetaAceptableViewModel.Valor2, new { @class = "form-control width-meta" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <span class="aclaracion">(ejemplo: 0.60 >= meta > 0.40)</span>
                                    @Html.ValidationMessageFor(m => m.MetaAceptableViewModel, "", new { @class = "text-danger" })
                                    @Html.ValidationMessageFor(m => m.MetaAceptableViewModel.Valor1, "", new { @class = "text-danger" })
                                    @Html.ValidationMessageFor(m => m.MetaAceptableViewModel.Valor2, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-xs-12 col-sm-6 col-md-6">
                                    <label>Meta a mejorar</label>
                                    <div class="testimonial-group">
                                        <div class="row">
                                            <div class="width-row">
                                                <div class="width-meta-izq">
                                                    @Html.TextBoxFor(m => m.MetaAMejorarViewModel.Valor1, new { @class = "form-control width-meta" })
                                                </div>
                                                <div class="width-signo">
                                                    @Html.EnumDropDownListFor(x => x.MetaAMejorarViewModel.Signo1, new { @class = "form-control width-signo" })
                                                </div>
                                                <div class="width-nro">
                                                    <span class="AAA">meta</span>
                                                </div>
                                                <div class="width-signo">
                                                    @Html.EnumDropDownListFor(x => x.MetaAMejorarViewModel.Signo2, new { @class = "form-control width-signo" })
                                                </div>
                                                <div class="width-meta">
                                                    @Html.TextBoxFor(m => m.MetaAMejorarViewModel.Valor2, new { @class = "form-control width-meta" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <span class="aclaracion">(ejemplo: 0.4 >= meta > 0.2)</span>
                                    @Html.ValidationMessageFor(m => m.MetaAMejorarViewModel, "", new { @class = "text-danger" })
                                    @Html.ValidationMessageFor(m => m.MetaAMejorarViewModel.Valor1, "", new { @class = "text-danger" })
                                    @Html.ValidationMessageFor(m => m.MetaAMejorarViewModel.Valor2, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xs-12 col-sm-6 col-md-6">
                                    <label>Meta inaceptable</label>
                                    <div class="testimonial-group">
                                        <div class="row">
                                            <div class="width-row">
                                                <div class="width-meta-izq">
                                                    @Html.TextBoxFor(m => m.MetaInaceptableViewModel.Valor1, new { @class = "form-control width-meta" })
                                                </div>
                                                <div class="width-signo">
                                                    @Html.EnumDropDownListFor(x => x.MetaInaceptableViewModel.Signo1, new { @class = "form-control width-signo" })
                                                </div>
                                                <div class="width-nro">
                                                    meta
                                                </div>
                                                <div class="width-signo">
                                                    @Html.EnumDropDownListFor(x => x.MetaInaceptableViewModel.Signo2, new { @class = "form-control width-signo" })
                                                </div>
                                                <div class="width-meta">
                                                    @Html.TextBoxFor(m => m.MetaInaceptableViewModel.Valor2, new { @class = "form-control width-meta" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <span class="aclaracion">(ejemplo: 0.2 >= meta)</span>
                                    @Html.ValidationMessageFor(m => m.MetaInaceptableViewModel, "", new { @class = "text-danger" })
                                    @Html.ValidationMessageFor(m => m.MetaInaceptableViewModel.Valor1, "", new { @class = "text-danger" })
                                    @Html.ValidationMessageFor(m => m.MetaInaceptableViewModel.Valor2, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xs-12 col-sm-6 col-md-6">
                                    <div class="row">
                                        <div class="col-xs-8 col-sm-8 col-md-8">
                                            @Html.LabelFor(m => m.ResponsableID)
                                            <span class="text-danger">*</span>
                                            @Html.DropDownListFor(m => m.ResponsableID, Enumerable.Empty<SelectListItem>(), new { @id = "ddlResponsables", @class = "form-control" })
                                            @Html.ValidationMessageFor(m => m.CantidadResponsablesElegidos, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col-xs-1 col-sm-1 col-md-1">
                                            <label class="label-blanco">a</label>
                                            <a href="javascript:agregarResponsable();">
                                                <i class="pe-7s-plus boton-agregar"></i>
                                            </a>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-xs-9 col-sm-9 col-md-9">
                                            <div class="content table-responsive table-full-width">
                                                @if (Model != null && Model.Responsables != null)
                                                {
                                                    <table id="tblResponsables" class="table table-striped table-responsive">
                                                        <thead>
                                                            <tr>
                                                                <th>Nombre</th>
                                                                <th></th>
                                                            </tr>
                                                        </thead>
                                                        <tbody id="tblBodyResponsables">
                                                            @foreach (PersonaViewModel responsable in Model.Responsables)
                                                            {
                                                                <tr>
                                                                    <td>
                                                                        @responsable.NombreApellido
                                                                    </td>

                                                                    <td>
                                                                        <a id="@responsable.Id" class="aQuitarResponsable" href="#">
                                                                            <i data-toggle="tooltip" data-placement="bottom" title="Quitar" class="glyphicon glyphicon-trash"></i>
                                                                        </a>
                                                                    </td>

                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-xs-12 col-sm-6 col-md-6">
                                    <div class="row">
                                        <div class="col-xs-8 col-sm-8 col-md-8">
                                            @Html.LabelFor(m => m.InteresadoID)
                                            <span class="text-danger">*</span>
                                            @Html.DropDownListFor(m => m.InteresadoID, Enumerable.Empty<SelectListItem>(), new { @id = "ddlInteresados", @class = "form-control" })
                                            @Html.ValidationMessageFor(m => m.CantidadInteresadosElegidos, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="col-xs-1 col-sm-1 col-md-1">
                                            <label class="label-blanco">a</label>
                                            <a href="javascript:agregarInteresado();">
                                                <i class="pe-7s-plus boton-agregar"></i>
                                            </a>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-xs-9 col-sm-9 col-md-9">
                                            <div class="content table-responsive table-full-width">
                                                @if (Model != null && Model.Interesados != null)
                                                {
                                                    <table id="tblInteresados" class="table table-striped table-responsive">
                                                        <thead>
                                                            <tr>
                                                                <th>Nombre</th>
                                                                <th></th>
                                                            </tr>
                                                        </thead>
                                                        <tbody id="tblBodyInteresados">
                                                            @foreach (PersonaViewModel interesado in Model.Interesados)
                                                            {
                                                                <tr>
                                                                    <td>
                                                                        @interesado.NombreApellido
                                                                    </td>

                                                                    <td>
                                                                        <a id="@interesado.Id" class="aQuitarInteresado" href="#">
                                                                            <i data-toggle="tooltip" data-placement="bottom" title="Quitar" class="glyphicon glyphicon-trash"></i>
                                                                        </a>
                                                                    </td>

                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-lg-12">
                                    <h6>
                                        <small>
                                            <span class="text-danger">* campos obligatorios</span>
                                        </small>
                                    </h6>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xs-12 col-sm-12 col-md-12">
                                    <input type="submit" class="btn btn-fill btn-info" value="Guardar" />
                                    <button class="btn btn-fill btn-info" onclick="history.go(-1); return false;">Volver</button>
                                </div>
                            </div>
                            @Html.HiddenFor(m => m.CantidadInteresadosElegidos)
                            @Html.HiddenFor(m => m.CantidadResponsablesElegidos)
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    $("#MetaExcelenteViewModel_Valor1").keydown(function (e) {
        soloNumeros(e);
    });

    $("#MetaExcelenteViewModel_Valor2").keydown(function (e) {
        soloNumeros(e);
    });

    $("#MetaAceptableViewModel_Valor1").keydown(function (e) {
        soloNumeros(e);
    });

    $("#MetaAceptableViewModel_Valor2").keydown(function (e) {
        soloNumeros(e);
    });

    $("#MetaAMejorarViewModel_Valor1").keydown(function (e) {
        soloNumeros(e);
    });

    $("#MetaAMejorarViewModel_Valor2").keydown(function (e) {
        soloNumeros(e);
    });

    $("#MetaInaceptableViewModel_Valor1").keydown(function (e) {
        soloNumeros(e);
    });

    $("#MetaInaceptableViewModel_Valor2").keydown(function (e) {
        soloNumeros(e);
    });

    $("#MetaSatisfactoriaViewModel_Valor1").keydown(function (e) {
        soloNumeros(e);
    });

    $("#MetaSatisfactoriaViewModel_Valor2").keydown(function (e) {
        soloNumeros(e);
    });

    function soloNumeros(e) {
        // Allow: backspace, delete, tab, escape, enter and .
        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190, 109]) !== -1 ||
            // Allow: Ctrl+A, Command+A
            (e.keyCode === 65 && (e.ctrlKey === true || e.metaKey === true)) ||
            // Allow: home, end, left, right, down, up
            (e.keyCode >= 35 && e.keyCode <= 40)) {
            // let it happen, don't do anything
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    }

    function agregarInteresado() {
        var interesado = $("#ddlInteresados option:selected").text();
        var idInteresado = $("#ddlInteresados option:selected").val();

        if (interesado != '') {
            var parametros = {
                "idPersona": idInteresado,
                "nombre": interesado
            };
            $.ajax({
                data: parametros,
                url: '@Url.Action("AgregarInteresado", "Indicador")',
                type: 'post',
                beforeSend: function () {
                },
                success: function (response) {

                    $('#tblBodyInteresados').empty();

                    $("#CantidadInteresadosElegidos").val(response.length);

                    $.each(response, function (i, persona) {
                        var $tr = $('<tr>').append(
                          $('<td>').text(persona.NombreApellido),
                            '<td><div class="divTolltip" title="Quitar"><a id="' + persona.Id + '" class="glyphicon glyphicon-trash aQuitarInteresado" href="#" /></div></td>'
                        ).appendTo('#tblInteresados');
                    });

                    $("#ddlInteresados").val('').trigger('change');

                    demo.showNotificationInfo('top', 'center', 'Interesado ' + interesado + ' agregado exitosamente.', 'pe-7s-check');
                }
            });
        }
    }

    function agregarResponsable() {
        var responsable = $("#ddlResponsables option:selected").text();
        var idResponsable = $("#ddlResponsables option:selected").val();

        if (responsable != '') {
            var parametros = {
                "idPersona": idResponsable,
                "nombre": responsable
            };
            $.ajax({
                data: parametros,
                url: '@Url.Action("AgregarResponsable", "Indicador")',
                type: 'post',
                beforeSend: function () {
                },
                success: function (response) {

                    $("#CantidadResponsablesElegidos").val(response.length);

                    $('#tblBodyResponsables').empty();

                    $.each(response, function (i, persona) {
                        var $tr = $('<tr>').append(
                          $('<td>').text(persona.NombreApellido),
                            '<td><div class="divTolltip" title="Quitar"><a id="' + persona.Id + '" class="glyphicon glyphicon-trash aQuitarResponsable" href="#" /></div></td>'
                        ).appendTo('#tblResponsables');
                    });

                    $("#ddlResponsables").val('').trigger('change');

                    demo.showNotificationInfo('top', 'center', 'Responsable ' + responsable + ' agregado exitosamente.', 'pe-7s-check');
                }
            });
        }
    }

    $("#ddlObjetivos").select2({
        ajax: {
            beforeSend: function (xhr, opts) {
            },
            url: '@Url.Action("BuscarObjetivos", "Objetivo")',
            dataType: 'json',
            delay: 250,
            data: function (params) {
                return {
                    nombreObjetivo: params.term,
                    idArea: $("#ddlAreas").val(),
                };
            },
            processResults: function (data, page) {
                return {
                    results: procesarObjetivos(data)
                };
            },
            placeholder: "Select a customer",
            initSelection: function (element, callback) {
            },
            cache: true
        },
        minimumInputLength: 0,
        language: {
            inputTooShort: function (args) {
                return "Ingrese al menos un caracter";
            },
            inputTooLong: function (args) {
                return "Texto demadiado largo";
            },
            errorLoading: function () {
                return "Error al cargar resultados";
            },
            loadingMore: function () {
                return "Cargando más resultados";
            },
            noResults: function () {
                return "No se encontraron resultados";
            },
            searching: function () {
                return "Buscando...";
            },
            maximumSelected: function (args) {
                return "Error al cargar resultados";
            }
        }
    });

    $('#ddlObjetivos').on("select2:selecting", function (e) {

        var idObjetivo = e.params.args.data.id;

        var parametros = {
            "idObjetivo": idObjetivo
        };
        $.ajax({
            data: parametros,
            url: '@Url.Action("BuscarArea", "Objetivo")',
            type: 'post',
            beforeSend: function () {
            },
            success: function (response) {

                var option = $('<option>', {
                    value: response.Id
                }).html(response.Nombre).appendTo("#ddlAreas");

                $("#ddlAreas").val(response.Id).trigger('change');
            }
        });
    });

    $('#ddlAreas').on("select2:selecting", function (e) {
        $("#ddlObjetivos").val('').trigger('change');
    });

    $("#ddlAreas").select2({
        ajax: {
            beforeSend: function (xhr, opts) {
            },
            url: '@Url.Action("BuscarAreas", "Area")',
            dataType: 'json',
            delay: 250,
            data: function (params) {
                return {
                    nombreArea: params.term,
                };
            },
            processResults: function (data, page) {
                return {
                    results: procesarAreas(data)
                };
            },
            cache: true
        },
        minimumInputLength: 0,
        language: {
            inputTooShort: function (args) {
                return "Ingrese al menos un caracter";
            },
            inputTooLong: function (args) {
                return "Texto demadiado largo";
            },
            errorLoading: function () {
                return "Error al cargar resultados";
            },
            loadingMore: function () {
                return "Cargando más resultados";
            },
            noResults: function () {
                return "No se encontraron resultados";
            },
            searching: function () {
                return "Buscando...";
            },
            maximumSelected: function (args) {
                return "Error al cargar resultados";
            }
        }
    });

    $("#ddlFrecuencias").select2({
        ajax: {
            beforeSend: function (xhr, opts) {
            },
            url: '@Url.Action("BuscarFrecuencias", "Indicador")',
            dataType: 'json',
            delay: 250,
            data: function (params) {
                return {
                    nombreFrecuencia: params.term,
                };
            },
            processResults: function (data, page) {
                return {
                    results: procesarFrecuencias(data)
                };
            },
            cache: true
        },
        minimumInputLength: 0,
        language: {
            inputTooShort: function (args) {
                return "Ingrese al menos un caracter";
            },
            inputTooLong: function (args) {
                return "Texto demadiado largo";
            },
            errorLoading: function () {
                return "Error al cargar resultados";
            },
            loadingMore: function () {
                return "Cargando más resultados";
            },
            noResults: function () {
                return "No se encontraron resultados";
            },
            searching: function () {
                return "Buscando...";
            },
            maximumSelected: function (args) {
                return "Error al cargar resultados";
            }
        }
    });

    function procesarFrecuencia(resultado) {
        return { id: resultado.FrecuenciaMedicionIndicadorID, text: resultado.Descripcion };
    }

    function procesarFrecuencias(resultados) {
        var array = [];
        for (i = 0; i < resultados.length; i++) {
            array.push(procesarFrecuencia(resultados[i]));
        }
        return array
    }

    function procesarObjetivo(resultado) {
        return { id: resultado.Id, text: resultado.Nombre };
    }

    function procesarObjetivos(resultados) {
        var array = [];
        for (i = 0; i < resultados.length; i++) {
            array.push(procesarObjetivo(resultados[i]));
        }
        return array
    }

    function procesarArea(resultado) {
        return { id: resultado.Id, text: resultado.Nombre };
    }

    function procesarAreas(resultados) {
        var array = [];
        for (i = 0; i < resultados.length; i++) {
            array.push(procesarObjetivo(resultados[i]));
        }
        return array
    }

    $("#ddlResponsables").select2({
        ajax: {
            beforeSend: function (xhr, opts) {
            },
            url: '@Url.Action("BuscarResponsable", "Indicador")',
            dataType: 'json',
            delay: 250,
            data: function (params) {
                return {
                    nombreOApellidoONombreUsuario: params.term,
                };
            },
            processResults: function (data, page) {
                return {
                    results: procesarPersonas(data)
                };
            },
            cache: true
        },
        minimumInputLength: 1,
        language: {
            inputTooShort: function (args) {
                return "Ingrese nombre, apellido o usuario";
            },
            inputTooLong: function (args) {
                return "Texto demadiado largo";
            },
            errorLoading: function () {
                return "Error al cargar resultados";
            },
            loadingMore: function () {
                return "Cargando más resultados";
            },
            noResults: function () {
                return "No se encontraron resultados";
            },
            searching: function () {
                return "Buscando...";
            },
            maximumSelected: function (args) {
                return "Error al cargar resultados";
            }
        }
    });

    $("#ddlInteresados").select2({
        ajax: {
            beforeSend: function (xhr, opts) {
            },
            url: '@Url.Action("BuscarInteresado", "Indicador")',
            dataType: 'json',
            delay: 250,
            data: function (params) {
                return {
                    nombreOApellidoONombreUsuario: params.term,
                };
            },
            processResults: function (data, page) {
                return {
                    results: procesarPersonas(data)
                };
            },
            cache: true
        },
        minimumInputLength: 1,
        language: {
            inputTooShort: function (args) {
                return "Ingrese nombre, apellido o usuario";
            },
            inputTooLong: function (args) {
                return "Texto demadiado largo";
            },
            errorLoading: function () {
                return "Error al cargar resultados";
            },
            loadingMore: function () {
                return "Cargando más resultados";
            },
            noResults: function () {
                return "No se encontraron resultados";
            },
            searching: function () {
                return "Buscando...";
            },
            maximumSelected: function (args) {
                return "Error al cargar resultados";
            }
        }
    });

    function procesarPersona(resultado) {
        return { id: resultado.Id, text: resultado.NombreApellido };
    }

    function procesarPersonas(resultados) {
        var array = [];
        for (i = 0; i < resultados.length; i++) {
            array.push(procesarPersona(resultados[i]));
        }
        return array
    }

    $('body').on('click', '.aQuitarInteresado', function () {

        var tempScrollTop = $(window).scrollTop();

        var idInteresado = [$(this).attr('id')];

        var parametros = {
            "idPersona": idInteresado
        };

        $.ajax({
            data: parametros,
            url: '@Url.Action("QuitarInteresado", "Indicador")',
            type: 'post',
            beforeSend: function () {
            },
            success: function (response) {

                $("#CantidadInteresadosElegidos").val(response.length);

                $('#tblBodyInteresados').empty();

                $.each(response, function (i, persona) {
                    var $tr = $('<tr>').append(
                      $('<td>').text(persona.NombreApellido),
                        '<td><div class="divTolltip" title="Quitar"><a id="' + persona.Id + '" class="glyphicon glyphicon-trash aQuitarInteresado" href="#" /></div></td>'
                    ).appendTo('#tblInteresados');
                });

                demo.showNotificationInfo('top', 'center', 'Interesado quitado exitosamente.', 'pe-7s-check');
            }
        });
    });

    $('body').on('click', '.aQuitarResponsable', function () {

        var tempScrollTop = $(window).scrollTop();

        var idResponsable = [$(this).attr('id')];

        var parametros = {
            "idPersona": idResponsable
        };

        $.ajax({
            data: parametros,
            url: '@Url.Action("QuitarResponsable", "Indicador")',
            type: 'post',
            beforeSend: function () {
            },
            success: function (response) {

                $("#CantidadResponsablesElegidos").val(response.length);

                $('#tblBodyResponsables').empty();

                $.each(response, function (i, persona) {
                    var $tr = $('<tr>').append(
                      $('<td>').text(persona.NombreApellido),
                        '<td><div class="divTolltip" title="Quitar"><a id="' + persona.Id + '" class="glyphicon glyphicon-trash aQuitarResponsable" href="#" /></div></td>'
                    ).appendTo('#tblResponsables');
                });

                demo.showNotificationInfo('top', 'center', 'Responsable quitado exitosamente.', 'pe-7s-check');
            }
        });
    });

    var mensageExito = '@Html.Raw(@ViewBag.MensageExito)';

    if (mensageExito != '') {
        demo.showNotificationInfo('top', 'center', mensageExito, 'pe-7s-check');
    }
</script>
